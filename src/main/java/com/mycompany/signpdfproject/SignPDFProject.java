package com.mycompany.signpdfproject;

import java.util.Date;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.signatures.BouncyCastleDigest;
import com.itextpdf.signatures.DigestAlgorithms;
import com.itextpdf.signatures.IExternalDigest;
import com.itextpdf.signatures.IExternalSignature;
import com.itextpdf.signatures.PdfSignatureAppearance;
import com.itextpdf.signatures.PdfSigner;
import com.itextpdf.signatures.PrivateKeySignature;
import com.itextpdf.kernel.geom.Rectangle;
import com.itextpdf.kernel.pdf.PdfReader;
import com.itextpdf.kernel.pdf.StampingProperties;
 
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.Security;
import java.security.cert.Certificate;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class SignPDFProject {
    //Tên file sau khi được tạo
    private static final String FILE = "SignPDF.pdf";
    
    //Password của file keystore
    public static final char[] PASSWORD = "12345678".toCharArray();
    //Tên của file keystore
    public static final String KEYSTORE = "pdf_keystore.jks";
    //Đường dẫn đến file pdf, do để trong thư mục gốc của project nên chỉ cần ./ là có thể trỏ đến file
    public static final String SRC = "./SignPDF.pdf";
    
    //List các tên sau khi ký để hiển thị khi được tạo
    public static final String[] RESULT_FILES = new String[] {
            "SignPDF_SHA256.pdf",
            "SignPDF_SHA512.pdf"
    };
    
    private static final Font firstFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static final Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

    public static void main(String[] args) {
        try {
            //Khởi tạo một đối tượng Document gán các thông tin vào đối tượng để có thể tạo file PDF
            Document document = new Document();
            //PdfWriter là một đối tượng của itextpdf Khởi tạo trình ghi PDF mà chế độ xem này sử dụng để viết tài liệu
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            //Mở document và có thể bắt đầu thêm nội dung vào phần content của document
            document.open();
            //Thêm các thông tin chính cho đối tượng document
            addMetaData(document);
            //Thêm các thông tin nộ dung cho đối tượng document
            addTitlePage(document);
            //Đóng đối tượng document khi đã thêm đầy đủ dữ liệu
            document.close();
            //Hàm để mở file pdf sau khi ghi đủ dữ liệu ở trên và tiến hành đọc file keystore + ký keystore lên file PDF trên
            //Ký xong sẽ tạo ra các file PDF với các hàm băm SHA256, SHA512
            openPDFSign();
        } catch (DocumentException | FileNotFoundException e) {
            System.err.println(e.getMessage());
        }
    }
    
    private static void addMetaData(Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Lars Vogel");
        document.addCreator("Lars Vogel");
    }

    private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 1);
        preface.add(new Paragraph("Hello everyone", firstFont));

        addEmptyLine(preface, 1);
        preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + ", " + new Date(),
                smallBold));

        document.add(preface);
        document.newPage();
    }
    
    //Hàm để mở file pdf sau khi ghi đủ dữ liệu ở trên và tiến hành đọc file keystore + ký keystore lên file PDF trên
    //Ký xong sẽ tạo ra các file PDF với các hàm băm SHA256, SHA512
    public static void openPDFSign() {
        //Tạo đối tượng file
        File file = new File(FILE);
        //Đọc file có tên là "SignPDF.pdf", nếu chưa có thì sẽ tự tạo
        file.mkdirs();
        //BouncyCastle là một thư viện Java bổ sung cho Java Cryptographic Extension (JCE) mặc định. 
        //Trong bài viết giới thiệu này, chúng tôi sẽ giới thiệu cách sử dụng BouncyCastle để thực hiện các hoạt động mật mã, chẳng hạn như mã hóa và chữ ký.
        BouncyCastleProvider provider = new BouncyCastleProvider();
        //Security cung cấp xác thực và uỷ quyền cho ứng dụng java
        Security.addProvider(provider);
        try {
            //Khởi tạo đối tượng KeyStore
            //"KeyStore.getDefaultType()" trả về kiểu khoá mặc định "jks - java key store"
            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
            //Đọc file keystore .jks với tên và password đã cấu hình trước đó
            ks.load(new FileInputStream(KEYSTORE), PASSWORD);
            //Đọc alias từ file keystore, alias là một chuỗi duy nhất để định danh file keystore, mỗi keystore chỉ có một alias
            String alias = ks.aliases().nextElement();
            //Tạo một đối tượng PrivateKey chứa khoá bí mật, Trả về khoá được liên kết với key alias ở trên, sử dụng password đã cấu hình để có thể lấy được khoá này
            PrivateKey pk = (PrivateKey) ks.getKey(alias, PASSWORD);
            //Trả về chuỗi chứng chỉ được liên kết với bí danh đã cho. Chuỗi chứng chỉ phải được liên kết với alias bằng lệnh gọi setKeyEntry hoặc lệnh gọi setEntry với PrivateKeyEntry.
            Certificate[] chain = ks.getCertificateChain(alias);

            //Tạo đối tượng SignPDFProject, sau đó dùng hàm sign để ký số theo hàm băm SHA256, SHA512
            SignPDFProject app = new SignPDFProject();
            app.sign(SRC, RESULT_FILES[0], chain, pk, DigestAlgorithms.SHA256, provider.getName(),
                    PdfSigner.CryptoStandard.CMS, "Signing for PDF - SHA256", "ACTVN");
            app.sign(SRC, RESULT_FILES[1], chain, pk, DigestAlgorithms.SHA512, provider.getName(),
                    PdfSigner.CryptoStandard.CMS, "Signing for PDF - SHA512", "ACTVN");
        } catch (IOException | GeneralSecurityException e) {
            System.err.println("Log: " + e.getMessage());
        }
    }
    
    public void sign(String src, String dest, Certificate[] chain, PrivateKey pk, String digestAlgorithm,
            String provider, PdfSigner.CryptoStandard signatureType, String reason, String location)
            throws GeneralSecurityException, IOException {
        //Đọc và phân tích tài liệu PDF.
        PdfReader reader = new PdfReader(src);
        //thuộc tính - StampingProperties cho văn bản ký. Lưu ý rằng mã hóa sẽ được giữ nguyên bất kể những gì được đặt trong thuộc tính.
        StampingProperties stampingProperties = new StampingProperties();
        
        //Tạo một phiên bản PdfSigner.
        //reader - PdfReader đọc tệp PDF 
        //outputStream- OutputStream để ghi tệp PDF đã ký 
        //path - Tệp mà đầu ra được ghi tạm thời  
        //append - boolean để cho biết liệu việc ký có diễn ra ở chế độ append hay không
        PdfSigner signer = new PdfSigner(reader, new FileOutputStream(dest), stampingProperties);
 
        // Tạo khung chứa chữ ký trên file pdf
        Rectangle rect = new Rectangle(36, 648, 500, 100);
        //public class PdfSignatureAppearance mở rộng Đối tượng. Cung cấp các phương pháp thuận tiện để tạo ra một chữ ký. Sử dụng nó kết hợp với PdfSigner.
        PdfSignatureAppearance appearance = signer.getSignatureAppearance();
        appearance
                .setReason(reason)
                .setLocation(location)
 
                // Chỉ định xem giao diện trước khi trường được ký sẽ được sử dụng hay không
                // làm nền cho trường đã ký. Giá trị "false" là giá trị mặc định.
                .setReuseAppearance(false)
                .setPageRect(rect)
                .setPageNumber(1);
        signer.setFieldName("sig");
        //Triển khai interface IExternalSignature có thể được sử dụng khi bạn có đối tượng PrivateKey.
        IExternalSignature pks = new PrivateKeySignature(pk, digestAlgorithm, provider);
        //Trả về MessageDigest được liên kết với thuật toán băm được cung cấp.
        IExternalDigest digest = new BouncyCastleDigest();
 
        // Ký vào tài liệu bằng chế độ tách rời, CMS hoặc CAdES tương đương.
        signer.signDetached(digest, pks, chain, null, null, null, 0, signatureType);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}

